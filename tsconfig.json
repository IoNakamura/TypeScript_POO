{
  "compilerOptions": {
    /* Visita https://aka.ms/tsconfig para leer más sobre este archivo */

    /* Proyectos */
    // "incremental": true,                              /* Guarda archivos .tsbuildinfo para permitir la compilación incremental de proyectos. */
    // "composite": true,                                /* Habilita restricciones que permiten que un proyecto TypeScript se use con referencias de proyecto. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Especifica la ruta al archivo de compilación incremental .tsbuildinfo. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Deshabilita la preferencia de archivos fuente en lugar de archivos de declaración al referenciar proyectos compuestos. */
    // "disableSolutionSearching": true,                 /* Opta por excluir un proyecto de la verificación de referencias multi-proyecto al editar. */
    // "disableReferencedProjectLoad": true,             /* Reduce el número de proyectos cargados automáticamente por TypeScript. */

    /* Lenguaje y Entorno */
    "target": "es2016",                                  /* Establece la versión del lenguaje JavaScript para el JavaScript emitido e incluye declaraciones de biblioteca compatibles. */
    // "lib": [],                                        /* Especifica un conjunto de archivos de declaración de biblioteca empaquetados que describen el entorno de ejecución objetivo. */
    // "jsx": "preserve",                                /* Especifica qué código JSX se genera. */
    // "libReplacement": true,                           /* Habilita el reemplazo de biblioteca. */
    // "experimentalDecorators": true,                   /* Habilita soporte experimental para decoradores experimentales heredados. */
    // "emitDecoratorMetadata": true,                    /* Emite metadatos de tipo de diseño para declaraciones decoradas en archivos fuente. */
    // "jsxFactory": "",                                 /* Especifica la función de fábrica JSX utilizada al apuntar a la emisión de React JSX, por ejemplo, 'React.createElement' o 'h'. */
    // "jsxFragmentFactory": "",                         /* Especifica la referencia de Fragmento JSX utilizada para fragmentos al apuntar a la emisión de React JSX, por ejemplo, 'React.Fragment' o 'Fragment'. */
    // "jsxImportSource": "",                            /* Especifica el especificador de módulo utilizado para importar las funciones de fábrica JSX cuando se usa 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Especifica el objeto invocado para 'createElement'. Esto solo se aplica cuando se apunta a la emisión de React JSX. */
    // "noLib": true,                                    /* Deshabilita la inclusión de cualquier archivo de biblioteca, incluido el lib.d.ts predeterminado. */
    // "useDefineForClassFields": true,                  /* Emite campos de clase compatibles con el estándar ECMAScript. */
    // "moduleDetection": "auto",                        /* Controla qué método se usa para detectar archivos JS con formato de módulo. */

    /* Módulos */
    "module": "commonjs",                                /* Especifica qué código de módulo se genera. */
    // "rootDir": "./",                                  /* Especifica la carpeta raíz dentro de tus archivos fuente. */
    // "moduleResolution": "node10",                     /* Especifica cómo TypeScript busca un archivo desde un especificador de módulo dado. */
    // "baseUrl": "./",                                  /* Especifica el directorio base para resolver nombres de módulos no relativos. */
    // "paths": {},                                      /* Especifica un conjunto de entradas que reasignan importaciones a ubicaciones de búsqueda adicionales. */
    // "rootDirs": [],                                   /* Permite que múltiples carpetas sean tratadas como una al resolver módulos. */
    // "typeRoots": [],                                  /* Especifica múltiples carpetas que actúan como './node_modules/@types'. */
    // "types": [],                                      /* Especifica nombres de paquetes de tipos que se incluirán sin ser referenciados en un archivo fuente. */
    // "allowUmdGlobalAccess": true,                     /* Permite acceder a globales UMD desde módulos. */
    // "moduleSuffixes": [],                             /* Lista de sufijos de nombre de archivo para buscar al resolver un módulo. */
    // "allowImportingTsExtensions": true,               /* Permite que las importaciones incluyan extensiones de archivo TypeScript. Requiere '--moduleResolution bundler' y '--noEmit' o '--emitDeclarationOnly'. */
    // "rewriteRelativeImportExtensions": true,          /* Reescribe las extensiones de archivo '.ts', '.tsx', '.mts' y '.cts' en rutas de importación relativas a su equivalente JavaScript en archivos de salida. */
    // "resolvePackageJsonExports": true,                /* Usa el campo 'exports' del package.json al resolver importaciones de paquetes. */
    // "resolvePackageJsonImports": true,                /* Usa el campo 'imports' del package.json al resolver importaciones. */
    // "customConditions": [],                           /* Condiciones para establecer además de los valores predeterminados específicos del resolvedor al resolver importaciones. */
    // "noUncheckedSideEffectImports": true,             /* Verifica las importaciones de efectos secundarios. */
    // "resolveJsonModule": true,                        /* Habilita la importación de archivos .json. */
    // "allowArbitraryExtensions": true,                 /* Habilita la importación de archivos con cualquier extensión, siempre que esté presente un archivo de declaración. */
    // "noResolve": true,                                /* Prohíbe que 'import's, 'require's o '<reference>'s expandan el número de archivos que TypeScript debe agregar a un proyecto. */

    /* Soporte para JavaScript */
    // "allowJs": true,                                  /* Permite que los archivos JavaScript sean parte de tu programa. Usa la opción 'checkJS' para obtener errores de estos archivos. */
    // "checkJs": true,                                  /* Habilita el informe de errores en archivos JavaScript verificados por tipo. */
    // "maxNodeModuleJsDepth": 1,                        /* Especifica la profundidad máxima de carpeta utilizada para verificar archivos JavaScript desde 'node_modules'. Solo aplicable con 'allowJs'. */

    /* Emisión */
    // "declaration": true,                              /* Genera archivos .d.ts a partir de archivos TypeScript y JavaScript en tu proyecto. */
    // "declarationMap": true,                           /* Crea sourcemaps para archivos d.ts. */
    // "emitDeclarationOnly": true,                      /* Solo emite archivos d.ts y no archivos JavaScript. */
    // "sourceMap": true,                                /* Crea archivos de mapa de origen para archivos JavaScript emitidos. */
    // "inlineSourceMap": true,                          /* Incluye archivos sourcemap dentro del JavaScript emitido. */
    // "noEmit": true,                                   /* Deshabilita la emisión de archivos desde una compilación. */
    // "outFile": "./",                                  /* Especifica un archivo que agrupa todas las salidas en un archivo JavaScript. Si 'declaration' es true, también designa un archivo que agrupa toda la salida .d.ts. */
    "outDir": "./dist",                                   /* Especifica una carpeta de salida para todos los archivos emitidos. */
    // "removeComments": true,                           /* Deshabilita la emisión de comentarios. */
    // "importHelpers": true,                            /* Permite importar funciones auxiliares desde tslib una vez por proyecto, en lugar de incluirlas por archivo. */
    // "downlevelIteration": true,                       /* Emite JavaScript más compatible pero verboso y menos eficiente para la iteración. */
    // "sourceRoot": "",                                 /* Especifica la ruta raíz para que los depuradores encuentren el código fuente de referencia. */
    // "mapRoot": "",                                    /* Especifica la ubicación donde el depurador debe localizar archivos de mapa en lugar de ubicaciones generadas. */
    // "inlineSources": true,                            /* Incluye código fuente en los sourcemaps dentro del JavaScript emitido. */
    // "emitBOM": true,                                  /* Emite una marca de orden de bytes UTF-8 (BOM) al principio de los archivos de salida. */
    // "newLine": "crlf",                                /* Establece el carácter de nueva línea para emitir archivos. */
    // "stripInternal": true,                            /* Deshabilita la emisión de declaraciones que tienen '@internal' en sus comentarios JSDoc. */
    // "noEmitHelpers": true,                            /* Deshabilita la generación de funciones auxiliares personalizadas como '__extends' en la salida compilada. */
    // "noEmitOnError": true,                            /* Deshabilita la emisión de archivos si se reportan errores de verificación de tipo. */
    // "preserveConstEnums": true,                       /* Deshabilita el borrado de declaraciones 'const enum' en el código generado. */
    // "declarationDir": "./",                           /* Especifica el directorio de salida para archivos de declaración generados. */

    /* Restricciones de Interoperabilidad */
    // "isolatedModules": true,                          /* Asegura que cada archivo pueda ser transpilado de forma segura sin depender de otras importaciones. */
    // "verbatimModuleSyntax": true,                     /* No transforma ni elide ninguna importación o exportación no marcada como solo tipo, asegurando que se escriban en el formato del archivo de salida basado en la configuración 'module'. */
    // "isolatedDeclarations": true,                     /* Requiere anotación suficiente en las exportaciones para que otras herramientas puedan generar archivos de declaración de manera trivial. */
    // "erasableSyntaxOnly": true,                       /* No permite construcciones en tiempo de ejecución que no sean parte de ECMAScript. */
    // "allowSyntheticDefaultImports": true,             /* Permite 'import x from y' cuando un módulo no tiene una exportación predeterminada. */
    "esModuleInterop": true,                             /* Emite JavaScript adicional para facilitar el soporte para importar módulos CommonJS. Esto habilita 'allowSyntheticDefaultImports' para compatibilidad de tipos. */
    // "preserveSymlinks": true,                         /* Deshabilita la resolución de enlaces simbólicos a su ruta real. Esto se correlaciona con la misma bandera en node. */
    "forceConsistentCasingInFileNames": true,            /* Asegura que las mayúsculas y minúsculas sean correctas en las importaciones. */

    /* Verificación de Tipos */
    "strict": true,                                      /* Habilita todas las opciones estrictas de verificación de tipos. */
    // "noImplicitAny": true,                            /* Habilita el informe de errores para expresiones y declaraciones con un tipo 'any' implícito. */
    // "strictNullChecks": true,                         /* Al verificar tipos, tiene en cuenta 'null' y 'undefined'. */
    // "strictFunctionTypes": true,                      /* Al asignar funciones, verifica para asegurar que los parámetros y los valores de retorno sean compatibles con subtipos. */
    // "strictBindCallApply": true,                      /* Verifica que los argumentos para los métodos 'bind', 'call' y 'apply' coincidan con la función original. */
    // "strictPropertyInitialization": true,             /* Verifica las propiedades de clase que se declaran pero no se establecen en el constructor. */
    // "strictBuiltinIteratorReturn": true,              /* Los iteradores incorporados se instancian con un tipo 'TReturn' de 'undefined' en lugar de 'any'. */
    // "noImplicitThis": true,                           /* Habilita el informe de errores cuando se le da el tipo 'any' a 'this'. */
    // "useUnknownInCatchVariables": true,               /* Variables de cláusula catch predeterminadas como 'unknown' en lugar de 'any'. */
    // "alwaysStrict": true,                             /* Asegura que 'use strict' siempre se emita. */
    // "noUnusedLocals": true,                           /* Habilita el informe de errores cuando las variables locales no se leen. */
    // "noUnusedParameters": true,                       /* Genera un error cuando un parámetro de función no se lee. */
    // "exactOptionalPropertyTypes": true,               /* Interpreta los tipos de propiedad opcionales como están escritos, en lugar de agregar 'undefined'. */
    // "noImplicitReturns": true,                        /* Habilita el informe de errores para rutas de código que no retornan explícitamente en una función. */
    // "noFallthroughCasesInSwitch": true,               /* Habilita el informe de errores para casos de fallthrough en declaraciones switch. */
    // "noUncheckedIndexedAccess": true,                 /* Agrega 'undefined' a un tipo cuando se accede usando un índice. */
    // "noImplicitOverride": true,                       /* Asegura que los miembros que sobrescriben en clases derivadas estén marcados con un modificador override. */
    // "noPropertyAccessFromIndexSignature": true,       /* Fuerza el uso de accesores indexados para claves declaradas usando un tipo indexado. */
    // "allowUnusedLabels": true,                        /* Deshabilita el informe de errores para etiquetas no utilizadas. */
    // "allowUnreachableCode": true,                     /* Deshabilita el informe de errores para código inalcanzable. */

    /* Completitud */
    // "skipDefaultLibCheck": true,                      /* Omite la verificación de tipos de archivos .d.ts que se incluyen con TypeScript. */
    "skipLibCheck": true                                 /* Omite la verificación de tipos de todos los archivos .d.ts. */
  }
}
